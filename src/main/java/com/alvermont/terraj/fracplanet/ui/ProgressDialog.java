/*
 * Java Terrain and Stellar System Ports
 *
 * Copyright (C) 2006 Martin H. Smith based on work by original
 * authors.
 *
 * Released under the terms of the GNU General Public License
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA  02110-1301, USA.
 *
 * Linking TerraJ statically or dynamically with other modules is making a
 * combined work based on TerraJ. Thus, the terms and conditions of the
 * GNU General Public License cover the whole combination.
 *
 * In addition, as a special exception, the copyright holders of TerraJ
 * give you permission to combine this program with free software programs
 * or libraries that are released under the GNU LGPL and with code included
 * in the standard release of JOGL, Java Getopt and FreeMarker under the BSD
 * license (or modified versions of such code, with unchanged license) and with
 * Apache Commons and Log4J libraries under the Apache license (or modified versions
 * of such code. You may copy and distribute such a system following the terms
 * of the GNU GPL for TerraJ and the licenses of the other code concerned,
 * provided that you include the source code of that other code when and as the
 * GNU GPL requires distribution of source code.
 *
 * Note that people who make modified versions of TerraJ are not obligated to grant
 * this special exception for their modified versions; it is their choice whether
 * to do so. The GNU General Public License gives permission to release a modified
 * version without this exception; this exception also makes it possible to release
 * a modified version which carries forward this exception.
 */

/*
 * ProgressDialog.java
 *
 * Created on January 6, 2006, 1:35 PM
 */
package com.alvermont.terraj.fracplanet.ui;

import com.alvermont.terraj.fracplanet.util.Progress;

/**
 * Dialog that handles the progress bar display
 *
 * @author  martin
 * @version $Id: ProgressDialog.java,v 1.5 2006/07/06 06:58:34 martin Exp $
 */
public class ProgressDialog extends javax.swing.JDialog implements Progress
{
    /** The current info string */
    private String info = "Unset";

    // Variables declaration - do not modify                     
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;

    // NETBEANS SWING CODE USE RELAXED CHECKSTYLE SETTINGS

    /**
     * Creates new form ProgressDialog
     *
     * @param parent The parent object for this form
     * @param modal Whether this is a modal dialog or not
     */
    public ProgressDialog(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Progress ...");
        jLabel1.setText("jLabel1");

        org.jdesktop.layout.GroupLayout layout =
            new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane()
            .setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                org.jdesktop.layout.GroupLayout.LEADING,
                layout.createSequentialGroup().addContainerGap().add(
                    layout.createParallelGroup(
                        org.jdesktop.layout.GroupLayout.LEADING).add(
                        jProgressBar1,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 292,
                        Short.MAX_VALUE).add(
                        jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        292, Short.MAX_VALUE)).addContainerGap()));
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                org.jdesktop.layout.GroupLayout.LEADING,
                layout.createSequentialGroup().addContainerGap().add(jLabel1).addPreferredGap(
                    org.jdesktop.layout.LayoutStyle.RELATED, 24, Short.MAX_VALUE).add(
                    jProgressBar1,
                    org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                    org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                    org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap()));

        java.awt.Dimension screenSize =
            java.awt.Toolkit.getDefaultToolkit()
                .getScreenSize();
        setBounds(
            (screenSize.width - 320) / 2, (screenSize.height - 103) / 2, 320,
            103);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * Called when a operation is about to start to set up ready to display
     * progress info
     * @param steps The total number of steps that there will be in this
     * operation
     * @param newInfo A string describing the operation
     */
    public void progressStart(int steps, String newInfo)
    {
        this.info = newInfo;

        this.jLabel1.setText(info + " ...");

        this.jProgressBar1.setMinimum(0);
        this.jProgressBar1.setMaximum(steps);
    }

    /**
     * Called if progress has halted for some time
     *
     * @param reason A string describing the reason that no progress is
     * occurring
     */
    public void progressStall(String reason)
    {
        this.jLabel1.setText("Stalled: " + this.info + " ...");
    }

    /**
     * Called when progress has been made to update the display
     *
     * @param step The current step number that we have reached. This will
     * range from 0 to one less than the number of steps that exist for
     * this operation.
     */
    public void progressStep(int step)
    {
        this.jProgressBar1.setValue(step);
    }

    /**
     * Called when an operation has completed
     *
     * @param newInfo A string describing the status of the operation
     */
    public void progressComplete(String newInfo)
    {
        this.jProgressBar1.setValue(this.jProgressBar1.getMaximum());

        this.jLabel1.setText(newInfo + ".");
    }

    // End of variables declaration                   
}
